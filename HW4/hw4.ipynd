import datetime, time, pytz
import requests
import json
import pandas as pd
import calendar
from scipy import stats
import  numpy  as  np 
import math


EST = pytz.timezone('America/New_York')

start_date = str(datetime.datetime.now().date() - datetime.timedelta(days=1095)) + " 13:30:00"
end_date = str(datetime.datetime.now().date()) + " 13:30:00"

start = time.strptime(start_date, "%Y-%m-%d %H:%M:%S")
end = time.strptime(end_date, "%Y-%m-%d %H:%M:%S")

start_timeStamp = str(int(time.mktime(start)))
end_timeStamp = str(int(time.mktime(end)))


def process_json(symbol_list, start, end):    

    all_data = list() # All DataFrames of different ETFs are stored in all_data.
    for symbol in symbol_list:
        date = list()
        #print('start crawling '+ symbol)        
        # get link
        url = 'https://query1.finance.yahoo.com/v8/finance/chart/'+ symbol + '?symbol='+ symbol +'&period1='+ start + '&period2='+ end +'&interval=1d&includePrePost=true&events=div%7Csplit%7Cearn&lang=en-US&region=US&crumb=Kiilb9S0iNl&corsDomain=finance.yahoo.com'
        
        # request for document
        res = requests.get(url)    
        json_content = json.loads(res.text)        
    
        # get closing price
        adjclose = json_content['chart']['result'][0]['indicators']['adjclose'][0]['adjclose']
        
        # get timestamp and convert to 'yyyy-mm-dd' format
        timestamp_list = json_content['chart']['result'][0]['timestamp']    
        for timestamp in timestamp_list:
            dt_tmp = datetime.datetime.fromtimestamp(timestamp, EST)
            date.append(dt_tmp.strftime("%Y-%m-%d"))
        
        # turn data into pandas dataframe
        data = {'Date' : date, symbol : adjclose}   
        df = pd.DataFrame.from_dict(data, orient='index')
        df = df.transpose()
        
        all_data.append(df)
    
    return all_data





# read file
file = pd.read_csv('Total Bond Market ETF List (82).csv')

# Screening for ETFs that existed before the end of 2015
mask = file['Inception'] < "2015-12-31"

# symbol of ETFs that existed before the end of 2015
Symbols = file[mask]['Symbol']
#print(Symbols)
# crawl over the ETFs on the site
all_frames = process_json(Symbols, start_timeStamp, end_timeStamp)

# merge all dataframes and show the result
for i in range(1,len(all_frames)):
    all_frames[0] = pd.merge(all_frames[0],all_frames[i],on='Date',how='outer')


last_weekday = -1
rf = 2.407300 / 100

d_m_ASKSR = {}
d_m_Omega = {}
d_m_Q = {}

d_d_ASKSR ={}
d_d_Omega = {}
d_d_Q = {}

lis1 = []
lis2 = []

r_m = []
r_d = []

year = datetime.datetime.strptime(all_frames[0]['Date'][0], '%Y-%m-%d').year
month = datetime.datetime.strptime(all_frames[0]['Date'][0], '%Y-%m-%d').month
last_month = month
firstDayWeekDay, monthRange = calendar.monthrange(year, month)
lastDay = datetime.date(year=year, month=month, day=monthRange)

for j in Symbols:
    for i in range(len(all_frames[0]['Date'])):
        
        year = datetime.datetime.strptime(all_frames[0]['Date'][i], '%Y-%m-%d').year
        month = datetime.datetime.strptime(all_frames[0]['Date'][i], '%Y-%m-%d').month
        firstDayWeekDay, monthRange = calendar.monthrange(year, month)
        
       
        # 新月份開頭
        if(last_month != month):
            lis1.append(all_frames[0][j][i - 1])
            #print(all_frames[0][j][i - 1])
        
        last_month = month
            
        if((datetime.datetime.strptime(all_frames[0]['Date'][i], '%Y-%m-%d').weekday() == 4)):
            lis2.append(all_frames[0][j][i])
        
    # 計算報酬
    for i in range(1, len(lis1)-1):
        r_m.append((lis1[i] - lis1[i-1]) / lis1[i-1])

    for i in range(1, len(lis2)-1):
        r_d.append((lis2[i] - lis2[i-1]) / lis2[i-1])
    
    # 計算 ASKSR for month
    a = (3 * (3 * stats.kurtosis(r_m) - 4 * stats.skew(r_m) * stats.skew(r_m) - 9) ** 0.5) / (np.var(r_m) * (3 * stats.kurtosis(r_m) - 5 * stats.skew(r_m) * stats.skew(r_m) - 9))
            
    b = (3 * stats.skew(r_m)) / (np.std(r_m) * (3 * stats.kurtosis(r_m) - 5 * stats.skew(r_m) * stats.skew(r_m) - 9))
    
    n = np.mean(r_m) - ( (3 * stats.skew(r_m) * np.std(r_m)) / (3 * stats.kurtosis(r_m) - 4 * stats.skew(r_m) * stats.skew(r_m) - 9))
    
    q = 3 * np.std(r_m) * ((3 * stats.kurtosis(r_m) - 5 * stats.skew(r_m) * stats.skew(r_m) - 9) ** 0.5) / (3 * stats.kurtosis(r_m) - 4 * stats.skew(r_m) * stats.skew(r_m) - 9)
    
    p = (a * a - b * b) ** 0.5
    
    oa = (1) * (b + a * (n - rf) / ((q * q + (n -rf) * (n - rf)) ** 0.5))
    
    
    if(math.isnan((2 * (oa * (n - rf) - q * (p - (a * a - (b - oa)) ** 0.5))) ** 0.5) != True):
        if(isinstance((2 * (oa * (n - rf) - q * (p - (a * a - (b - oa)) ** 0.5))) ** 0.5, (int, float))):
            d_m_ASKSR[j] = (2 * (oa * (n - rf) - q * (p - (a * a - (b - oa)) ** 0.5))) ** 0.5
        else:
            d_m_ASKSR[j] = (np.mean(r_m) / np.std(r_m)) * (1 + 2 * stats.skew(r_m) / 3 * (np.mean(r_m) / np.std(r_m))) ** 0.5
            
    
    # 計算 ASKSR for week
    a = (3 * (3 * stats.kurtosis(r_d) - 4 * stats.skew(r_d) * stats.skew(r_d) - 9) ** 0.5) / (np.var(r_d) * (3 * stats.kurtosis(r_d) - 5 * stats.skew(r_d) * stats.skew(r_d) - 9))
            
    b = (3 * stats.skew(r_d)) / (np.std(r_d) * (3 * stats.kurtosis(r_d) - 5 * stats.skew(r_d) * stats.skew(r_d) - 9))
    
    n = np.mean(r_d) - ( (3 * stats.skew(r_d) * np.std(r_d)) / (3 * stats.kurtosis(r_d) - 4 * stats.skew(r_d) * stats.skew(r_d) - 9))
    
    q = 3 * np.std(r_d) * ((3 * stats.kurtosis(r_d) - 5 * stats.skew(r_d) * stats.skew(r_d) - 9) ** 0.5) / (3 * stats.kurtosis(r_d) - 4 * stats.skew(r_d) * stats.skew(r_d) - 9)
    
    p = (a * a - b * b) ** 0.5
    
    oa = (1) * (b + a * (n - rf) / ((q * q + (n -rf) * (n - rf)) ** 0.5))
    
    
    if(math.isnan((2 * (oa * (n - rf) - q * (p - (a * a - (b - oa)) ** 0.5))) ** 0.5) != True):
        if(isinstance((2 * (oa * (n - rf) - q * (p - (a * a - (b - oa)) ** 0.5))) ** 0.5, (int, float))):
            d_d_ASKSR[j] = (2 * (oa * (n - rf) - q * (p - (a * a - (b - oa)) ** 0.5))) ** 0.5
        else:
            d_d_ASKSR[j] = (np.mean(r_d) / np.std(r_d)) * (1 + 2 * stats.skew(r_d) / 3 * (np.mean(r_d) / np.std(r_d))) ** 0.5
    
    
    
    # 計算 Omega for month
    up = 0.0
    down = 0.0
    
    for i in range(len(r_m)):
        if(r_m[i] < rf):
            down = down + (rf - r_m[i])
        else:
            up = up + (r_m[i] - rf)
            
    if(down != 0):
        d_m_Omega[j] = (up / down)-1
    
    
    # 計算 Omega for day
    up = 0.0
    down = 0.0
    
    for i in range(len(r_d)):
        if(r_d[i] < rf):
            down = down + (rf - r_d[i])
        else:
            up = up + (r_d[i] - rf)
            
    if(down != 0):
        d_d_Omega[j] = (up / down)-1

    
    
    # 計算Q(g)
    temp = 0
    c = 0
    for i in range(len(r_m)):
        if(math.isnan(r_m[i]) == False):
            c = c + 1
            temp = temp + r_m[i]
    d_m_Q[j] = math.exp(temp/(len(r_m) - c))
    
    temp = 0
    c = 0
    for i in range(len(r_d)):
        if(math.isnan(r_d[i]) == False):
            c = c + 1
            temp = temp + r_d[i]
    d_d_Q[j] = math.exp(temp/(len(r_d) - c))
    
    
    
    
    del lis1[:]
    del lis2[:]
    del r_m[:]
    del r_d[:]
    

#印出排序後之結果
for key, value in sorted(d_m_ASKSR.items(), key=lambda kv: kv[1],reverse = True):
    print(key, value)
for key, value in sorted(d_d_ASKSR.items(), key=lambda kv: kv[1],reverse = True):
    print(key, value)
for key, value in sorted(d_m_Omega.items(), key=lambda kv: kv[1],reverse = True):
    print(key, value)
for key, value in sorted(d_d_Omega.items(), key=lambda kv: kv[1],reverse = True):
    print(key, value)
for key, value in sorted(d_m_Q.items(), key=lambda kv: kv[1],reverse = True):
    print(key, value)
for key, value in sorted(d_d_Q.items(), key=lambda kv: kv[1],reverse = True):
    print(key, value)
